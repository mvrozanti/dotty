#+OPTIONS: html-postamble:nil toc:nil
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+TITLE: Dotty, a dotfile sync tool

#+BEGIN_CENTER
[[https://github.com/vibhavp/dotty][View on Github]]

Dotty is a little python script for syncing dotfiles stored on your git repo.
#+END_CENTER

* Installation:
  Add dotty to your dotfiles git repository:
  
  ~git submodule add https://github.com/vibhavp/dotty~
  
  To Update dotty to the latest version:
  
  ~git submodule update --remote dotty~
  
* Configuration
  Dotty uses a JSON-formatted config located on the root of your dotfile repository.
  Currently, dotty can create/check ~directories~, ~link~ or ~copy~ files/directories, ~install~ packages and execute shell ~commands~. 

* Example
  #+BEGIN_SRC javascript
    {
        "mkdirs": ["~/.vim"],
        
        "link": {
            "source": "dest",
            "zshrc": "~/.zshrc"
            //directories can be linked too
            "emacs/lisp/": "~/.emacs.d/lisp"
        },

        "copy": {
            "source": "dest",
            "offlineimaprc": "~/.offlineimaprc"
        },

        "install_cmd": "pacaur -Syu",
        "install": [
            "zsh",
            "emacs"
        ],
		
        "commands": [
            "emacs -batch -Q -l ~/.emacs.d/firstrun.el"
        ]
    }
  #+END_SRC
  
* Usage
  #+BEGIN_SRC sh
    usage: dotty.py [-h] [-f] [-b] [-c] [-r] [-e] [-d] [config]

    optional arguments:
      --config         the JSON file you want to use
      -h, --help     show this help message and exit
      -f, --force  replace files/folders if they already exist
      -b, --backup   run copy in reverse so that files and directories are backed up to the directory the config file is in
      -c, --clear    clears the config directory before anything, removing all files listed in it
      -r, --restore  restore all elements to system (mkdirs, link, copy, install(install_cmd), commands)
      -e, --eject    run --clear and move config folder to another location (thank hoberto) [TODO] 
      -d, --dryrun   perform a dry run, outputting what changes would have been made if this argument was removed [TODO]
  #+END_SRC 

* Todo
 Implement eject command
 Implement dryrun command
 Check if any file listed in config is missing and warn user before trying to operate on them
  

#+OPTIONS: html-postamble:nil toc:nil
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://thomasf.github.io/solarized-css/solarized-light.min.css" />
#+TITLE: Dotty, a dotfile sync tool

#+BEGIN_CENTER
[[https://github.com/vibhavp/dotty][View on Github]]

Dotty is a little python script for syncing dotfiles stored on your git repo.
#+END_CENTER

* Installation:
  Add dotty to your dotfiles git repository:
  
  ~git submodule add https://github.com/mvrozanti/dotty~
  
  To Update dotty to the latest version:
  
  ~git submodule update --remote dotty~
  
* Configuration
  Dotty uses a JSON-formatted config located on the local dotty repository.
  Currently, dotty can create/check with ~mkdirs~, ~link~ or ~copy~ files/directories, ~install~ packages and execute shell ~commands~. 

* Example
  (make sure to remove comment)
  #+BEGIN_SRC javascript
    {
        "mkdirs": ["~/.vim"],
        
        "link": {
            "source": "dest",
            "zshrc": "~/.zshrc"
            //directories can be linked too
            "emacs/lisp/": "~/.emacs.d/lisp"
        },

        "copy": {
            "source": "dest",
            "offlineimaprc": "~/.offlineimaprc"
        },

        "install_cmd": "pacaur -Syu",
        "install": [
            "zsh",
            "emacs"
        ],
		
        "commands": [
            "emacs -batch -Q -l ~/.emacs.d/firstrun.el"
        ]
    }
  #+END_SRC
  
* Usage
  #+BEGIN_SRC sh
usage: dotty.py [-h] [--config *dotty*.json] [-f] [-b] [-c] [-r] [-d] [-s]
                [-e LOCATION]

optional arguments:
  -h, --help            show this help message and exit
  --config *dotty*.json
                        the JSON file you want to use, it's only required if
                        filename doesn't end in json or doesn't contain dotty
                        in the basename
  -f, --force           [1mdo not prompt user[0m: replace files/folders if
                        they already exist, removing previous directory tree
  -b, --backup          run copy in reverse so that files and directories are
                        backed up to the directory the config file is in
  -c, --clear           clears the config directory before anything, removing
                        all files listed in it
  -r, --restore         restore all elements to system (mkdirs, link, copy,
                        install(install_cmd), commands)
  -d, --dryrun          perform a dry run, outputting what changes would have
                        been made if this argument was removed [TODO]
  -s, --sync            perform action --backup, commits changes and pushes to
                        the dotfiles remote repository (must already be set
                        up) and then --clear
  -e LOCATION, --eject LOCATION
                        run --clear and move config folder to another location
                        (thank hoberto)
  #+END_SRC 

* Todo
 Implement dryrun command.

 Check if any file listed in config are missing and warn user before trying to operate on them.

 Implement mutually exclusive arguments.
